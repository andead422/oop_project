#ifndef SINGLETON_H
#define SINGLETON_H

template <class T> // створюємо шаблон класу сінглтон 
class Singleton {  // це необхідно для того, аби при багаторазовому використанні сінглтону не прописувати особливості роботи цього патерну кожен раз
protected:
    Singleton() {}; // конструктор захищений, аби його неможливо було викликати ззовні класу
public:
    Singleton(const Singleton&) = delete;  // видаляємо конструктор копіювання та оператор присвоювання, аби не допустити дублікатів класу
    void operator=(const Singleton&) = delete;
    static T* getInstance() {
        static T* instance; // під час кожного звернення до цієї функції буде повертатися значення статичної змінної
        return instance;    // а оскільки ми не оголошуємо цю змінну заздалегідь, під час першого звернення вона ініціалізується, створивши єкземпляр класу 
    }
};

#endif
